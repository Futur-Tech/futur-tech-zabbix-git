#!/usr/bin/env bash

# Original code from https://gist.github.com/henryiii/5841984

# This script should be named (or symbolically linked) as git-all so that
# it can be run as a git command (if it is in the path). The repo location should
# be set in REPOLOC. Can be relative if this script is also in a repo!

# Standard bash stuff to get the current directory
unset CDPATH
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# This should be the location of your directory that has repos in it
REPOLOC=$DIR/..

# Variables for spawned processes
spawned=()

if [[ $# = 0 ]] || [[ $1 = -h ]] ; then
    echo "git all [option]"
    echo "Options:"
    echo " status: Checks all the git repos in git folder"
    echo " qstatus: Checks all the git repos in git folder (no fetch)"
    echo " pull: Pulls all repos in the folder"
    echo " fetch: Fetches all repos in the folder"
    echo " qfetch: Fetches all repos in the folder (somewhat) quietly"
    echo " merge: Merges all repos in the folder (origin)"
    echo " deploy-update: run \"./deploy-update -b \$2\" on each repository"
    exit 0
fi

cd $REPOLOC
if [[ $1 == qfetch ]] || [[ $1 == fetch ]] || [[ $1 == status ]] || [[ $1 == deploy-update ]]; then
    for file in $(ls); do
        if [[ -d $REPOLOC/$file/.git ]]; then
            cd $REPOLOC/$file
            git fetch -q &
            spawned+=($!)
        fi
    done

    echo -n "Waiting for all repos to report: "
    for pid in ${spawned[@]}; do
        wait $pid
    done
    echo "done"
fi

cd $REPOLOC
for file in $(ls); do
    if [[ -d $REPOLOC/$file/.git ]]; then 
        cd $REPOLOC/$file

        git checkout &>/dev/null
        
        if [[ $1 == status ]] || [[ $1 == qstatus ]]; then
            echo -n "Repo $file: "
            if git diff-index --quiet HEAD -- ; then
                if [[ -n $(git rev-list origin...HEAD) ]]; then
                    if  [[ -n $(git rev-list origin..HEAD) ]]; then
                        echo "Needs pushing:"
                        git log origin..HEAD --oneline
                    else
                        echo "Needs merging:"
                        git log HEAD..origin --oneline
                        #git rev-list HEAD..format --format="%s" --abbrev-commit
                    fi
                else
                    echo 'No changes'
                fi
            else
                echo 'Changed files:'
            fi
            git status -s

        elif [[ $1 == fetch ]]; then
            echo -n "Fetched $file: "
            if [[ -n $(git rev-list HEAD..origin) ]]; then
                echo "Needs merging:"
                git log HEAD..origin --oneline
            else
                echo 'Up to date.'
            fi


        elif [[ $1 == merge ]]; then
            echo -n "Merging $file: "
            cd $REPOLOC/$file
            if [[ -n $(git rev-list HEAD..origin) ]]; then
                git merge origin
            else
                echo "merge not needed."
            fi

        elif [[ $1 == pull ]]; then
            echo -n "Pulling $file: "
            cd $REPOLOC/$file

            if ! git pull; then
                exit 1
            fi
        
        elif [[ $1 == deploy-update ]] && [ -n "$2" ] ; then
            echo -n "Deploying updates for $file: "
            cd $REPOLOC/$file

            if [ -x "deploy-update.sh" ] ; then
                if git diff-index --quiet HEAD -- ; then
                    if [[ -n $(git rev-list origin...HEAD) ]]; then
                        echo
                        ./deploy-update.sh -b $2
                    else
                        echo 'No changes'
                    fi
                fi
            else
                echo -n "deploy-update.sh not found" 
            fi

        else
            echo "Option Not found..."
            exit 1 
        fi    
    fi
done
